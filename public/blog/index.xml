<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Portfolio</title>
    <link>/blog/</link>
    <description>Recent content in Blogs on Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 16 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Working with genomes in Python: calculating pairwise sequence identity</title>
      <link>/blog/working-with-genomes-in-python-calculating-pairwise-sequence-identity/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/working-with-genomes-in-python-calculating-pairwise-sequence-identity/</guid>
      <description>In bioinformatics, k-mers refer to all the possible subsequences (of length k) from a read obtained through DNA sequencing. For example, if the DNA sequencing read is “ATCATCATG”, then the 3-mers in that read include “ATC” (which occurs twice), “TCA” (which occurs twice), “CAT” (occurs twice), and “ATG” (occurs once).
We can write a function in Python that takes a string of nucleotides as input and returns a dictionary with all 3-mers present in that string, and the number of times that each 3-mer occurs.</description>
    </item>
    
    <item>
      <title>test</title>
      <link>/blog/test/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/test/</guid>
      <description>wirte sth test</description>
    </item>
    
    <item>
      <title>Working with genomes in Python: calculating pairwise sequence identity</title>
      <link>/blog/working-with-genomes-in-python-calculating-pairwise-sequence-identity/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/working-with-genomes-in-python-calculating-pairwise-sequence-identity/</guid>
      <description>In bioinformatics, we are often interested in determining whether or not two DNA or amino acid sequences are similar. One simple measure of similarity is called pairwise sequence identity. To calculate pairwise sequence identity, we take two sequences, count the number of positions in which both sequences share the same nucleotide or amino acid, and then divide by the total number of positions. For example, say we have these two DNA sequences:</description>
    </item>
    
    <item>
      <title>How R and Python can work together</title>
      <link>/blog/how-r-and-python-can-work-together/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/how-r-and-python-can-work-together/</guid>
      <description>It may not come as a surprise to you that one can write Python codes in R studio. But wouldn’t it be super cool if a variable created in R code chunk could also be used in Python code chunk in R studio? Believe it or not, you could actually have R and Python “communicate” with each other with the help of the reticulate package.
Now, I will show you one of the coolest tricks I have learned in my SDS 348 class at UT Austin.</description>
    </item>
    
  </channel>
</rss>